{"version":3,"sources":["components/Views/Home.js","components/Buttons/SquareOne.js","components/Views/Board1.js","components/Buttons/SquareTwo.js","components/Views/Board2.js","components/Views/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Home","start","bind","alert","Container","className","Col","Row","to","Component","SquareOne","props","type","onClick","value","Board1","i","this","squares","renderSquare","SquareTwo","Board2","GameBoard","state","playerOne","stepNumber","steps","Array","fill","slice","length","setState","concat","current","handleClick","App","exact","path","component","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7aec49f0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Home.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Col, Row } from \"reactstrap\";\r\nclass Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.start = this.start.bind(this);\r\n  }\r\n  start() {\r\n    // eslint-disable-next-line no-alert\r\n    alert(\"Hola!\");\r\n  }\r\n  render() {\r\n    return (\r\n      <Container className=\"container\">\r\n        <Col className=\"header-home\">\r\n          <h1>BATTLE OF POWERS</h1>\r\n          <h3>The battle to save or destroy the world!</h3>\r\n        </Col>\r\n        <Row>\r\n          <div className=\"text-content\">\r\n            <p>\r\n              En una imponente guerra épica, donde se enfrenta Greta Thunberg y\r\n              Donald Trump con su poder político, teniendo 2 opciones : poder\r\n              salvar a la Tierra o generar el comienzo de una extinción masiva.\r\n              ¿Existirá realmente el cambio Climático? ¿Se salvará el planeta ?\r\n            </p>\r\n          </div>\r\n        </Row>\r\n        <Col className=\"home-content\">\r\n          <Link to=\"/GameBoard\">\r\n            <button className=\"btn-start\">START</button>\r\n          </Link>\r\n        </Col>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./SquareOne.css\";\r\n\r\nfunction SquareOne(props) {\r\n  return (\r\n    <button type=\"button\" className=\"btn-square1\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SquareOne;\r\n","import React, { Component } from \"react\";\r\nimport SquareOne from \"../Buttons/SquareOne\";\r\nimport \"./Board1.css\";\r\nimport { Container } from \"reactstrap\";\r\n\r\nclass Board1 extends Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <SquareOne\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"board-me\">\r\n        <Container>\r\n          <div className=\"border-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"border-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"border-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board1;\r\n","import React from \"react\";\r\nimport \"./SquareTwo.css\";\r\n\r\nfunction SquareTwo(props) {\r\n  return (\r\n    <button type=\"button\" className=\"btn-square2\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SquareTwo;\r\n","import React, { Component } from \"react\";\r\nimport \"./Board2.css\";\r\nimport { Container } from \"reactstrap\";\r\nimport SquareTwo from \"../Buttons/SquareTwo\";\r\n\r\nclass Board2 extends Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <SquareTwo\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"board-enemy\">\r\n        <Container>\r\n          <div className=\"border-row2\">\r\n            {this.renderSquare(9)}\r\n            {this.renderSquare(10)}\r\n            {this.renderSquare(11)}\r\n          </div>\r\n          <div className=\"border-row2\">\r\n            {this.renderSquare(12)}\r\n            {this.renderSquare(13)}\r\n            {this.renderSquare(14)}\r\n          </div>\r\n          <div className=\"border-row2\">\r\n            {this.renderSquare(15)}\r\n            {this.renderSquare(16)}\r\n            {this.renderSquare(17)}\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board2;\r\n","import React, { Component } from \"react\";\r\nimport Board1 from \"./Board1\";\r\nimport Board2 from \"./Board2\";\r\nimport \"./Game.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Col, Row } from \"reactstrap\";\r\nclass GameBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playerOne: true,\r\n      stepNumber: 0,\r\n      steps: [{ squares: Array(9).fill(null) }]\r\n    };\r\n  }\r\n  handleClick(i) {\r\n    const steps = this.state.steps.slice(0, this.state.stepNumber + 1);\r\n    const current = steps[steps.length - 1];\r\n    const squares = current.squares.slice();\r\n    squares[i] = this.state.playerOne ? \"miss\" : \"hit\";\r\n    this.setState({\r\n      steps: steps.concat({\r\n        squares: squares\r\n      }),\r\n      playerOne: !this.state.playerOne,\r\n      stepNumber: steps.length\r\n    });\r\n  }\r\n  render() {\r\n    const steps = this.state.steps;\r\n    const current = steps[this.state.stepNumber];\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <h1>BATTLE OF POWERS</h1>\r\n          <h3>The battle to save or destroy the world!</h3>\r\n          <Link to=\"/\">\r\n            <button className=\"btn btn-outline-secondary\">Home</button>\r\n          </Link>\r\n          <Row>\r\n            <Col>\r\n              <Board1\r\n                onClick={i => this.handleClick(i)}\r\n                squares={current.squares}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Board2\r\n                onClick={i => this.handleClick(i)}\r\n                squares={current.squares}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default GameBoard;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./bootstrap.min.css\";\r\nimport Home from \"./components/Views/Home\";\r\n// import { Container, Row, Col } from \"reactstrap\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport GameBoard from \"../src/components/Views/GameBoard\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/GameBoard\" component={GameBoard} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\r\nconst rootEl = document.getElementById(\"root\");\r\nlet render = () => {\r\n  ReactDOM.render(<App />, rootEl);\r\n};\r\n\r\nif (module.hot) {\r\n  module.hot.accept(\"./App\", () => {\r\n    setTimeout(render);\r\n  });\r\n}\r\n\r\nrender();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}